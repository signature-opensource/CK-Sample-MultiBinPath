<Setup Engine="CK.Setup.StObjEngine, CK.StObj.Engine">

  <!-- This is the base path that applies to all relative paths that may appear in this file.
       When this BasePath is undefined or empty (the default), it is the path of this configuration file itself that is used: 
       by default all relative paths in this file are relative to this file's folder.
    
  <BasePath></BasePath>
  -->
   
  <!-- BinPaths: see https://github.com/signature-opensource/CK-StObj/blob/master/CK.StObj.Model/Configuration/BinPath.cs for the object documentation.
       These BinPaths describes the different applications that must participate in CKSetup process.
  -->
  <BinPaths>

    <!-- This is a basic configuration with all its default. Below the Back2 project is fully commented. -->    
    <BinPath Path="../Back2.App/bin/[Debug|Release]/net8.0">
      <ProjectPath>../Back2.Host</ProjectPath>
    </BinPath> 
    
    <!--
      Here, there is an alternate path that is described: [Debug|Release].
      The two paths will be tested and the one that exists with the MOST RECENT file in it will win: the "Debug" or "Release" winner will be applied to the following
      BinPath path (if they contain the same [Debug|Release] - or [Release|Debug] - alternate path of course).
    -->
    <!--
      Because this configuration uses explicit Types, we must set DiscoverAssembliesFromPath to true.
    -->
    <BinPath Path="../Back2.App/bin/[Debug|Release]/net8.0" DiscoverAssembliesFromPath="true" >
      <!--
        Can contain a set of assembly names <Assembly>An.Assembly.Name</Assembly> that must be processed for setup.
        Only assemblies that appear in this list will be considered: when this list is non empty, DiscoverAssembliesFromPath is normalized
        to "false".

        <Assemblies />
      -->

      <!-- Can contain <Type Name="Name.Space.TypeName, AssemblyName" Kind="xxx" /> child elements with types assembly qualified name that must be explicitly
           registered regardless of <Assemblies /> or DiscoverAssembliesFromPath results.

          The Kind is a combination of the AutoServiceKind enumeration that is defined here: https://github.com/signature-opensource/CK-StObj/blob/develop/CK.Abstractions/ConfigurableAutoServiceKind.cs
          The combined enum can use comma (the standard .Net way to combine enum flags) or pipe (|).
          
          Below are totally useless definitions (these declarations are already made by the StObjCollector that references all the types) that are
          good examples of what can be done.
      -->
      <Types>
        <!-- The IActivityMonitor and its ParallelLogger are scoped services that must be available in all containers.
             The right way to define them is:
                services.AddScoped<IActivityMonitor,ActivityMonitor>();
                services.AddScoped( sp => sp.GetRequiredService<IActivityMonitor>().ParallelLogger );
        -->
        <Type Name="CK.Core.IActivityMonitor, CK.ActivityMonitor" Kind="IsContainerConfiguredService|IsScoped" />
        <Type Name="CK.Core.IParallelLogger, CK.ActivityMonitor" Kind="IsContainerConfiguredService|IsScoped" />
        
      </Types>

      <!-- Optional set of <Type>Name.Space.TypeName, AssemblyName</Type> child elements with types assembly qualified name that must be excluded from  
           registration. Note that any type appearing in <GlobalExcludedTypes /> will also be excluded. -->
      <ExcludedTypes />

      <!-- The output path of the process for this BinPath. 
           This is an optional target (output) directory where generated files (assembly and/or sources) must be copied. 
           When not defined, the BinPath's Path attribute is used. 
      
      <OutputPath></OutputPath>

      Sine we are here in "project mode", we don't need the compiled assembly to be generated: the ProjectPath is perfect.
      -->

      <!-- ProjectPath is an optional target (output) directory for source files.
           When defined, a "$StObjGen" folder is created and the source files are moved from the OutputPath (or Path attribute) to this folder
           and, for ".cs" files, they are renamed into standard names "G0.cs", "G1.cs", etc. (even if currently only one file is generated).
      -->
      <ProjectPath>../Front.WebHost</ProjectPath>

      <!-- CompileOption can be:
            - None: (that is the default) Roslyn compilation is totally skipped (this is adapted to "Project Mode"). 
            - Parse: Roslyn syntax analyzer is run on the source code. Syntax error are detected.
            - Compile: The source code is parsed and compiled: a final assembly is produced. 
      -->
      <CompileOption>None</CompileOption>
      
    </BinPath>


  </BinPaths>

  <!-- These 2 options are for debugging: the "Real Objects" graph is dumped in the logs before and/or after topological sort. -->
  <TraceDependencySorterInput>false</TraceDependencySorterInput>
  <TraceDependencySorterOutput>false</TraceDependencySorterOutput>
  
  <!-- This option reverts the names for objects that share the same rank in the ordered graph.
       When the same setup is successful with both name ordering, this proves that all required dependencies are defined.
  -->
  <RevertOrderingNames>false</RevertOrderingNames>

  <!--
    This element can contain <Type>Name.Space.TypeName, AssemblyName</Type> child elements with types assembly qualified name that must
    be excluded from the Setup.
    Types excluded here are automatically excluded from all <BinPath> (as if they appear in each and every <BinPath><ExcludedTypes /></BinPath>).
  -->
  <GlobalExcludedTypes />

  <!-- Defines the aspect that handles 3 steps setup: "Real Objects" are associated to "Setup Items". -->
  <Aspect Type="CK.Setup.SetupableAspectConfiguration, CK.Setupable.Model" Version="1">
    
    <!-- These 3 options are the same as the ones above (for the "Real Objects" graph) but applies to the Setup Items graph. -->
    <TraceDependencySorterInput>false</TraceDependencySorterInput>
    <TraceDependencySorterOutput>false</TraceDependencySorterOutput>
    <RevertOrderingNames>false</RevertOrderingNames>

    <!--
      Whenever an object is not seen during a setup, it is considered obsolete: by default its version is deleted.
      Sets this to true to be less "aggressive": an unseen object's version is kept. 
    -->
    <KeepUnaccessedItemsVersion>false</KeepUnaccessedItemsVersion>
  </Aspect>

  <!-- Defines the aspect that handles Sql Server support. -->
  <Aspect Type="CK.Setup.SqlSetupAspectConfiguration, CK.SqlServer.Setup.Model">

    <!-- Other databases can be defined here. The default one (named "db") doesn't need to be specified here:
    the DefaultDatabaseConnectionString below does the job.

          <Database>
            <LogicalDatabaseName>histoDB</LogicalDatabaseName>
            <ConnectionString>Data Source=.;Initial Catalog=HistoDB;Integrated Security=True</ConnectionString>           
            <AutoCreate>true</AutoCreate> (This is optional: by default this is false, no auto creation is done.)
          </Database>
          
    -->
    <Databases />

    <!--
      Specifies the connection string of the default "db" database.
      Since no other VersionWriter/Reader is available, this aspect will register its own VersionWriter/Reader for Setup Items:
      the table CKCore.tItemVersion holds them.
      
      Important: Microsoft.Data.SqlClient is used (instead of the legacy System.Data.SqlClient) that requires secure communication by default.
      Setting TrustServerCertificate=True in the connection string works around https://docs.microsoft.com/en-us/troubleshoot/sql/connect/error-message-when-you-connect.
    -->
    <DefaultDatabaseConnectionString>Data Source=.;Initial Catalog=MultiBinPathDB;Integrated Security=True;TrustServerCertificate=True</DefaultDatabaseConnectionString>
  </Aspect>

</Setup>

