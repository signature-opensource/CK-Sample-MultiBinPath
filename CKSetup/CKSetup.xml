<?xml version="1.0" encoding="utf-8" ?>

<!-- The root element name can be named differently but what is important is the Engine attribute. 
     This Engine attribute is fundamental: it is the complete type of the object that will be instantiated and 
     executed by the Runner. It can be any class that looks like this:

    public class Engine
    {
        public Engine( IActivityMonitor m, XElement config ) { }

        public bool Run() => true;
    }

     Here, we want the StObjEngine to be executed. 
-->
<Setup Engine="CK.Setup.StObjEngine, CK.StObj.Engine">

  <!-- 
    Here are the pure CKSetup configurations: BasePath, WorkingDirectory, CKSetupName, LogLevel, ForceSetup, ExternalSignature, PreferredTargetRuntimes and Dependencies.
    The BinPaths element is shared between the Engine and CKSetup. CKSetup is only concerned by the path itself but the StObjEngine needs to configure these paths
    with more information like "Types" or "ExcludedTypes".
  -->

  <!-- This is the base path that applies to all relative paths that may appear in this file.
       When this BasePath is undefined or empty (the default), it is the path of this configuration file itself that is used: 
       by default all relative paths in this file are relative to this file's folder.
    
  <BasePath></BasePath>
  -->

  <!-- If you don't specify this WorkingDirectory, a timed folder is created under %Temp%/CKSetup folder. But keeping an eye on it is a good idea.
       By default: 
        - CKSetup.log file in this directory contains the logs with the Log Level specified here (set the attribute HasLogs="false" to skip producing the logs).
        - Old (ie. previous) timed folders are automatically cleaned up (set the attribute KeepOnlyCount="X" where X is not 5 to change number of previous run to keep). -->
  <WorkingDirectory>WorkingDir</WorkingDirectory>
 
  <!-- When specified, this is used as a sub folder in the WorkingDirectory so that Setup working directory are grouped by name.
       By default (or when empty), timed folders will be created right below the WorkingDirectory. 

    <CKSetupName></CKSetupName>
  -->
  
  <!-- Configures the verbosity of the logs. 
       Valid verbosity levels: Off, Release, Monitor, Terse, Verbose, Debug, 
       or any {Group,Line} format where Group and Line can be: Debug, Trace, Info, Warn, Error, Fatal, or Off.
  -->
  <LogLevel>Debug</LogLevel>

  <!-- By default, CKSetup calculates a binary signature (SHA1) of all files participating in a setup and saves it in CKSetup.signature.txt 
       files after execution in each BinPath and in the WorkingDirectory. 
       If nothing has changed (all BinPaths and WorkingDirectory are up to date), CKSetup can skip the setup (None) or reuse the WorkingDirectory
       (skipping setup dependencies resolution) and run the Engine (Engine) or run a full setup anyway (Full).
       By default, this is None:
      
  <ForceSetup>None</ForceSetup>
  -->

  <!-- An optional string that can be absolutely anything: its purpose is to participate in the calculation of the signature 
       and therefore to represent any external information whose change must cause a necessary setup.

  <ExternalSigntaure>Some external key.</ExternalSignature>
  -->

  <!-- Optional element that allows you to specify a list of runtimes in descending order of preference (separated by ; like TargetFrameworks in a csproj).
       In the absence of this element, the "smallest/oldest" runtime is selected.
       For example, on BinPaths that contain only NetStandard2.0 assemblies (pure "Model" assemblies), Net461 will be selected.
       Note that CKSetup.Runner supports 4 runtimes: Net461, NetCoreApp21 and NetCoreApp31 and Net60.
 
  <PreferredTargetRuntimes>Net60</PreferredTargetRuntimes>
  -->
 

  <!-- Optional Dependencies element allows to inject any setup dependencies or increase the (minimal) version of a discovered setup dependencies.

       Example:

          <Dependencies>
            <Dependency Name="Another.Component" MinVersion="1.0.2-ci-develop.15" />
            <Dependency Name="Component.In.Whatever.Version" />
            <Dependency Name="CKSetup.Runner" MinVersion="5.0.0-d06-00-develop-0016" />
          </Dependencies>

       The case of the CKSetup.Runner dependency is special in that, if it does not appear, it is automatically added with the version of the CKSetup tool itself.
       It is therefore possible to use an "old runner" (which is done in the above example), or a "newer runner".
       For all the other dependencies, the resolution mechanism applies: the maximum of the different MinVersion will be used.
  -->

  <!-- Here are the StObj Engine configuration, starting with the shared BinPaths. -->

  <!-- BinPaths: see https://github.com/signature-opensource/CK-StObj/blob/master/CK.StObj.Model/Configuration/BinPath.cs for the object documentation.
       These BinPaths describes the different applications that must participate in CKSetup process.
  -->
  <BinPaths>

    <!-- This is a basic configuration with all its default. Below the front project is fully commented. -->    
    <BinPath Path="../Back.App/bin/[Debug|Release]/net6.0">
      <ProjectPath>../Back.WebHost</ProjectPath>
    </BinPath> 
    
    <!--
      Each BinPath corresponds to a folder with the available binaries. For netstandard targets, the <CopyLocalLockFileAssemblies> is required in the
      project so that all its dependencies are available.
      For netcoreapp targets, this is not required since the CKSetup process automatically ensures that a /publish folder is up to date (this folder, by design, contains
      the whole set of dependencies).

      Here, there is an alternate path that is described: [Debug|Release].
      The two paths will be tested and the one that exists with the MOST RECENT file in it will win: the "Debug" or "Release" winner will be applied to the following
      BinPath path (if they contain the same [Debug|Release] - or [Release|Debug] - alternate path of course).
    -->
    <BinPath Path="../Front.App/bin/[Debug|Release]/net6.0">
      <!--
        Can contain a set of assembly names <Assembly>An.Assembly.Name</Assembly> that must be processed for setup (only assemblies that appear in this list will be considered).
        With CKSetup, this list can be left empty: it is automatically filled with the "model" and "model dependent" assemblies discovered in the BinPath. -->
      <Assemblies />

      <!-- Can contain <Type Name="Name.Space.TypeName, AssemblyName" Kind="xxx" /> child elements with types assembly qualified name that must be explicitly
           registered regardless of <Assemblies />.

          The Kind is a combination of the AutoServiceKind enumeration that is defined here: https://github.com/signature-opensource/CK-StObj/blob/develop/CK.StObj.Model/AutomaticDI/AutoServiceKind.cs
          The combined enum can use comma (the standard .Net way to combine enum flags) or pipe (|).
          
          Below are useless definitions (these declarations are already made by the StObjCollector that references all the types) that are
          good examples of what can be done.
      -->
      <Types>
        <!-- The IActivityMonitor is by design a endpoint scoped service. It is not Optional (since it necessarily exists). -->
        <Type Name="CK.Core.IActivityMonitor, CK.ActivityMonitor" Kind="IsEndpointService|IsScoped" />
        <Type Name="CK.Core.IParallelLogger, CK.ActivityMonitor" Kind="IsEndpointService|IsScoped" />

        <!-- This defines a  [Multiple] ISingletonAutoService. Thanks to this definition, hosted services implementations are automatically registered. -->
        <Type Name="Microsoft.Extensions.Hosting.IHostedService, Microsoft.Extensions.Hosting.Abstractions" Kind="IsMultipleService|IsSingleton" Optional="True" />

        <!-- The IOptions<> family with its 2 singletons and 1 scoped shows how open generics can be registered.
             Registration must be done from the most specific types to the basic ones: here we must start with IOptionsSnapshot since IOptionsSnapshot<T> extends IOptions<T>.

              If we register them the other way, there will be an error since the Singleton of the parent will conflict with the Scoped wanted by the specialization.
        -->
        <Type Name="Microsoft.Extensions.Options.IOptionsSnapshot`1, Microsoft.Extensions.Options" Kind="IsScoped|IsProcessService" Optional="True" />
        <Type Name="Microsoft.Extensions.Options.IOption`1, Microsoft.Extensions.Options" Kind="IsSingleton,IsProcessService" Optional="True" />
        <!-- IOptionsMonitor is independent. -->
        <Type Name="Microsoft.Extensions.Options.IOptionsMonitor`1, Microsoft.Extensions.Options" Kind="IsSingleton|IsProcessService" Optional="True" />

        <!-- Other well known services life time can be defined... -->
        <Type Name="Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.Extensions.Logging.Abstractions" Kind="IsSingleton" Optional="True" />
        <Type Name="Microsoft.Extensions.Logging.ILoggerProvider, Microsoft.Extensions.Logging.Abstractions" Kind="IsSingleton" Optional="True" />
        
      </Types>

      <!-- Optional set of <Type>Name.Space.TypeName, AssemblyName</Type> child elements with types assembly qualified name that must be excluded from  
           registration. Note that any type appearing in <GlobalExcludedTypes /> will also be excluded. -->
      <ExcludedTypes />

      <!-- The output path of the process for this BinPath. 
           This is an optional target (output) directory where generated files (assembly and/or sources) must be copied. 
           When not defined, the BinPath's Path attribute is used. 
      
      <OutputPath></OutputPath>

      Sine we are here in "project mode", we don't need the compiled assembly to be generated: the ProjectPath is perfect.
      -->

      <!-- ProjectPath is an optional target (output) directory for source files.
           When defined, a "$StObjGen" folder is created and the source files are moved from the OutputPath (or Path attribute) to this folder
           and, for ".cs" files, they are renamed into standard names "G0.cs", "G1.cs", etc. (even if currently only one file is generated).
      -->
      <ProjectPath>../Front.WebHost</ProjectPath>

      <!-- CompileOption can be:
            - None: (that is the default) Roslyn compilation is totally skipped (this is adapted to" Project Mode"). 
            - Parse: Roslyn syntax analyzer is run on the source code. Syntax error are detected.
            - Compile: The source code is parsed and compiled: a final assembly is produced. 
      -->
      <CompileOption>None</CompileOption>
      
    </BinPath>


  </BinPaths>

  <!-- These 2 options are for debugging: the "Real Objects" graph is dumped in the logs before and/or after topological sort. -->
  <TraceDependencySorterInput>false</TraceDependencySorterInput>
  <TraceDependencySorterOutput>false</TraceDependencySorterOutput>
  <!-- This option reverts the names for objects that share the same rank in the ordered graph.
       When the same setup is successful with both name ordering, this proves that all required dependencies are defined.
  -->
  <RevertOrderingNames>false</RevertOrderingNames>

  <!--
    This element can contain <Type>Name.Space.TypeName, AssemblyName</Type> child elements with types assembly qualified name that must be excluded from the Setup.
    Types excluded here are automatically excluded from all <BinPath> (as if they appear in each and every <BinPath><ExcludedTypes /></BinPath>).
  -->
  <GlobalExcludedTypes />

  <!-- Defines the aspect that handles 3 steps setup: "Real Objects" are associated to "Setup Items". -->
  <Aspect Type="CK.Setup.SetupableAspectConfiguration, CK.Setupable.Model" Version="1">
    
    <!-- These 3 options are the same as the ones above (for the "Real Objects" graph) but applies to the Setup Items graph. -->
    <TraceDependencySorterInput>false</TraceDependencySorterInput>
    <TraceDependencySorterOutput>false</TraceDependencySorterOutput>
    <RevertOrderingNames>false</RevertOrderingNames>

    <!--
      Whenever an object is not seen during a setup, it is considered obsolete: by default its version is deleted.
      Sets this to true to be less "aggressive": an unseen object's version is kept. 
    -->
    <KeepUnaccessedItemsVersion>false</KeepUnaccessedItemsVersion>
  </Aspect>

  <!-- Defines the aspect that handles Sql Server support. -->
  <Aspect Type="CK.Setup.SqlSetupAspectConfiguration, CK.SqlServer.Setup.Model">

    <!-- Other databases can be defined here. The default one (named "db") doesn't need to be specified here: the DefaultDatabaseConnectionString below does the job.

          <Database>
            <LogicalDatabaseName>histoDB</LogicalDatabaseName>
            <ConnectionString>Data Source=.;Initial Catalog=HistoDB;Integrated Security=True</ConnectionString>           
            <AutoCreate>true</AutoCreate> (This is optional: by default this is false, no auto creation is done.)
          </Database>
          
    -->
    <Databases />

    <!--
      Specifies the connection string of the default "db" database.
      (Since no other VersionWriter/Reader is available, this aspect will register its own VersionWriter/Reader for Setup Items: the table CKCore.tItemVersion holds them.)
      
      Important: The net6.0 version (CKSetup v15+, CK-StObj v19+) now uses Microsoft.Data.SqlClient (instead of the legacy System.Data.SqlClient) that 
      requires secure communication by default. Setting TrustServerCertificate=True in the connection string works around https://docs.microsoft.com/en-us/troubleshoot/sql/connect/error-message-when-you-connect.
    -->
    <DefaultDatabaseConnectionString>Data Source=.;Initial Catalog=MultiBinPathDB;Integrated Security=True;TrustServerCertificate=True</DefaultDatabaseConnectionString>
  </Aspect>

</Setup>

