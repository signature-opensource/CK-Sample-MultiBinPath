{
  // This is the standard configuration section of the standard ILogger .Net Core framework.
  "Logging": {
    "LogLevel": {
      // This overrides the default that is configured in the Main (that is all logs in "Development", but only Information
      // and above otherwise).
      // 
      "Default": "Warning"
    }
  },
  // This is the CK.Monitoring configuration.
  // Note that all this can be reconfigured dynamically at any time!
  "Monitoring": {
    // Sets the AppDomain's global static ActivityMonitor.DefaultFilter that is used when the MinimalFilter of an ActivityMonitor
    // is Undefined.
    // Instead of this default, global, filter, the GrandOutput.MinimalFilter should be used (see below).
    // Note that as soon as a minimal filter exists (either directly on the ActivityMonitor or through one of its clients), this 
    // configuration doesn't apply. This default to "Trace": by setting it to "Debug", you catch all logs from any monitors that have 
    // an "Undefined" ActualFilter.
    //
    // "GlobalDefaultFilter": "Trace",
    //

    // The output "Logs" folder is the default. It is automatically created in the application
    // root directory (IHostingEnvironment.ContentRootPath).
    // This can be changed if needed either with a relative or absolute path.
    //
    // "LogPath": "Logs",

    //
    // By default, unhandled .Net exceptions are logged into the "CriticalErrors" folder (as basic text files) and in
    // the "{00000000-0000-0000-0000-000000000000}" default monitor.
    // There is little reason to change this default configuration.
    //
    // "LogUnhandledExceptions": true,

    //
    // By default, a .Net Core ILoggerProvider routes all the logs emitted by the standard ILogger to the
    // GrandOutput.ExternalLogs so that everything appears in the  "{00000000-0000-0000-0000-000000000000}" default monitor.
    // There is little reason to change this default configuration.
    // 
    // "HandleDotNetLogs": true,
    //

    // Now comes the GrandOutput log handlers.
    "GrandOutput": {
      // This is the primary heart beat in milliseconds of the IGrandOutputHandler.OnTimer() calls that enables handlers to
      // do whatever required housekeeping.
      // The 500 ms default is okay for most usages. 
      // Handlers often combines this configuration with a multiplicator (see below the TextFile configuration).
      // 
      // "TimerDuration": 500,
      //

      // Impacts the ActualFilter of all ActivityMonitors that are bound to the GrandOuput.
      // Acceptable values are (increasing verbosity): "Debug", "Trace", "Verbose", "Monitor", "Terse", "Release", "Off" or pairs of "{{Group,Line}}"
      // levels where Group or Line can be None, Debug, Trace, Info, Warn, Error, Fatal or Off. For instance "{Off,Debug}" filters out all Groups but let all
      // Lines be logged.
      // Recall that this is only a Minimal filter: if a more verbose configuration exists (on the monitor itself or on any of its other Clients), filters
      // are combined to ensure that the most verbose is satisfied.
      //
      //  "MinimalFilter": "Debug",
      //

      // Configures the filter level for GrandOutput.ExternalLog methods (the logs that go into the "{00000000-0000-0000-0000-000000000000}" default monitor).
      // Possible values are the LogLevelFilter: "None", "Debug", "Trace", "Info", "Warn", "Error", "Fatal" or "Off".
      // Defaults to "None" (the ActivityMonitor.DefaultFilter.Line is used).
      //
      // "ExternalLogLevelFilter": "Trace",
      //

      //
      // The handlers themselves:
      "Handlers": {
        // The Console handler writes all the logs to the console.
        // Usually this is enough:
        //
        "Console": true,
        //
        // However, some options are available below, but beware:
        // an empty configuration object is the same as false!
        //
        // "Console": {
        // Configures the text backround color.
        //
        // "BackgroundColor": "Black",
        //

        // Configures the time format used to display the DateTime before each logged line.
        // If not set, the default format is "yyyy-MM-dd HH\\hmm.ss.fff".
        // The maximal precision can be achived with "yyyy-MM-dd HH\\hmm.ss.fffffff".
        // IMPORTANT: Currently, this configuration is NOT dynamically tracked. To change it,
        //             one can suppress and restore the whole Console handler configuration.
        // 
        // "DateFormat": "yyyy-MM-dd HH\\hmm.ss.fff"
        //

        // By default, the full time is displayed with the "DateFormat" before each logged line. 
        // When set to true, the full time appears only once per minute and in between,
        // the delta of seconds (exact format is "+ss.fffffff") is displayed.
        // IMPORTANT: Currently, this configuration is NOT dynamically tracked. To change it,
        //             one can suppress and restore the whole Console handler configuration.
        // 
        //
        // "UseDeltaTime": false
        //
        // },

        // Simple clear text files.
        "TextFile": {
          // The rate of the auto flush (to be able to read the temporary current file content).
          // This is a multiple of the above TimerDuration and defaults to 6 (default timer duration
          // being 500 milliseconds, this flushes the text approximately every 3 seconds).
          // Setting this to zero disables the timed-base flush.
          //
          // "AutoFlushRate": 6,

          // Configures the maximal count of log entries per file before a new log file is created.
          // Defaults to 20000.
          // 
          // "MaxCountPerFile": 20000,
          //

          //
          // The rate of the automatic log file deletion.
          // This defaults to 1800 (which is 15 minutes with the default TimerDuration of 500ms).
          // Setting this to zero disables housekeeping entirely.
          //
          // "HousekeepingRate": 1800,
          //

          // Configures the minimum number of days to keep log files, when housekeeping is enabled via HousekeepingRate.
          // Log files older than this will be deleted. Setting this to 0 disables automatic file deletion.
          // This may be easier to use than MinimumTimeSpanToKeep available below.
          //
          // "MinimumDaysToKeep": 60,
          //

          // TimeSpan version of the MinimumDaysToKeep. May be used if smaller granularity than day is required.
          //
          // "MinimumTimeSpanToKeep": "60.0:0:0",
          //

          // Configures the maximum total file size log files can use, in kilobytes.
          // Defaults to 100 megabytes.
          // Note that og files newer than MinimumDaysToKeep will not be deleted (even if the total exceed this value).
          //
          // "MaximumTotalKbToKeep": 100000,

          // Configure the path of the folder where the log files will be generated: this must be specified and identifies
          // the handler (multiple text handlers may coexist as long as their Path differ).
          // It may be an absolute path, otherwise it is relative to the global "LogPath" (see above).
          // 
          "Path": "Text"
        },

        // Binary log files. This handler offers the same MaxCountPerFile, HousekeepingRate, MinimumDaysToKeep, MaximumTotalKbToKeep
        // and Path configurations as the "TextFile" above (there is no AutoFlushRate).
        //
        "BinaryFile": {
          // Configures whether to use Gzip compression after closing log files.
          // Defaults to false.
          //
          "UseGzipCompression": true,

          // Configure the path of the folder where the log files will be generated: this must be specified and identifies
          // the handler (multiple text handlers may coexist as long as their Path differ).
          // It may be an absolute path, otherwise it is relative to the global "LogPath" (see above).
          // 
          "Path": "Binary"
        }
      }
    }
  },

  // This section configures the LoggerTestHostedService.
  "TesLogs": {
    // Slow down as you wish...
    "TimerDuration": "00:00:01",
    // Sets this to false to avoid Raising/catching of unobserved exception (during GC collect).
    "ThrowTaskSchedulerUnobservedTaskException": false

  }
}
